#+TITLE: Lambda-x86 Project Notes

I've decided to build a quick-and-dirty compiler following _An Incremental Approach to Compiler Construction_ by Abdulaziz Ghuloum. I can build a bigger compiler later.

I've also decided to ditch continuation-passing style for this first draft. I'll get my head around regular recursive implementations first.

* Tasks
** DONE Fix up parser to handle booleans
   CLOSED: [2020-03-26 Thu 22:06]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2020-03-26 Thu 22:06]
   :END:
** DONE Finish parsing ~let~ nodes
   CLOSED: [2020-03-27 Fri 20:30]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2020-03-27 Fri 20:30]
   :END:
** TODO Fix up type checker                                     :enhancement:
I wonder if there's a way to use the type information to make my assembler more efficient. (I bet there is; I'll leave that for an enhancement.)
** TODO Use type information to improve instruction choice      :enhancement:
* Resources
** An Incremental Approach to Compiler Construction :ATTACH:
   :PROPERTIES:
   :Attachments: An%20Incremental%20Approach%20to%20Compiler%20Construction.pdf
   :ID:       91BA83F1-5BD6-42B1-BC3F-C3CEE4168023
   :END:
** Seeing what C compiles something to

Write the C code to a file called ~foo.c~; example:

#+BEGIN_SRC c
int main() {
  int foo = 1;
  int bar = 2;
  return foo == bar;
}
#+END_SRC

Then compile with:

#+BEGIN_SRC sh

  gcc -fomit-frame-pointer -S foo.c

#+END_SRC

That should give you a file named =foo.s= that looks like:

#+BEGIN_SRC asm

  	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 10, 15	sdk_version 10, 15, 4
	.globl	_main                   ## -- Begin function main
	.p2align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## %bb.0:
	movl	$0, -4(%rsp)
	movl	$1, -8(%rsp)
	movl	$2, -12(%rsp)
	movl	-8(%rsp), %eax
	cmpl	-12(%rsp), %eax
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	retq
	.cfi_endproc
                                        ## -- End function

.subsections_via_symbols

#+END_SRC
